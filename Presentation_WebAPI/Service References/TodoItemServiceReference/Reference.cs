//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Presentation_WebAPI.TodoItemServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoItemServiceReference.ITodoItemService")]
    public interface ITodoItemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findAll", ReplyAction="http://tempuri.org/ITodoItemService/findAllResponse")]
        Common.TodoItemDTO[] findAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findAll", ReplyAction="http://tempuri.org/ITodoItemService/findAllResponse")]
        System.Threading.Tasks.Task<Common.TodoItemDTO[]> findAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findAllPaged", ReplyAction="http://tempuri.org/ITodoItemService/findAllPagedResponse")]
        Common.ContainerDTO<Common.TodoItemDTO> findAllPaged(int start, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findAllPaged", ReplyAction="http://tempuri.org/ITodoItemService/findAllPagedResponse")]
        System.Threading.Tasks.Task<Common.ContainerDTO<Common.TodoItemDTO>> findAllPagedAsync(int start, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findById", ReplyAction="http://tempuri.org/ITodoItemService/findByIdResponse")]
        Common.TodoItemDTO findById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/findById", ReplyAction="http://tempuri.org/ITodoItemService/findByIdResponse")]
        System.Threading.Tasks.Task<Common.TodoItemDTO> findByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/create", ReplyAction="http://tempuri.org/ITodoItemService/createResponse")]
        bool create(Common.TodoItemDTO todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/create", ReplyAction="http://tempuri.org/ITodoItemService/createResponse")]
        System.Threading.Tasks.Task<bool> createAsync(Common.TodoItemDTO todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/update", ReplyAction="http://tempuri.org/ITodoItemService/updateResponse")]
        bool update(Common.TodoItemDTO todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/update", ReplyAction="http://tempuri.org/ITodoItemService/updateResponse")]
        System.Threading.Tasks.Task<bool> updateAsync(Common.TodoItemDTO todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/delete", ReplyAction="http://tempuri.org/ITodoItemService/deleteResponse")]
        bool delete(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoItemService/delete", ReplyAction="http://tempuri.org/ITodoItemService/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(long id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoItemServiceChannel : Presentation_WebAPI.TodoItemServiceReference.ITodoItemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoItemServiceClient : System.ServiceModel.ClientBase<Presentation_WebAPI.TodoItemServiceReference.ITodoItemService>, Presentation_WebAPI.TodoItemServiceReference.ITodoItemService {
        
        public TodoItemServiceClient() {
        }
        
        public TodoItemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoItemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoItemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoItemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Common.TodoItemDTO[] findAll() {
            return base.Channel.findAll();
        }
        
        public System.Threading.Tasks.Task<Common.TodoItemDTO[]> findAllAsync() {
            return base.Channel.findAllAsync();
        }
        
        public Common.ContainerDTO<Common.TodoItemDTO> findAllPaged(int start, int length) {
            return base.Channel.findAllPaged(start, length);
        }
        
        public System.Threading.Tasks.Task<Common.ContainerDTO<Common.TodoItemDTO>> findAllPagedAsync(int start, int length) {
            return base.Channel.findAllPagedAsync(start, length);
        }
        
        public Common.TodoItemDTO findById(long id) {
            return base.Channel.findById(id);
        }
        
        public System.Threading.Tasks.Task<Common.TodoItemDTO> findByIdAsync(long id) {
            return base.Channel.findByIdAsync(id);
        }
        
        public bool create(Common.TodoItemDTO todoItem) {
            return base.Channel.create(todoItem);
        }
        
        public System.Threading.Tasks.Task<bool> createAsync(Common.TodoItemDTO todoItem) {
            return base.Channel.createAsync(todoItem);
        }
        
        public bool update(Common.TodoItemDTO todoItem) {
            return base.Channel.update(todoItem);
        }
        
        public System.Threading.Tasks.Task<bool> updateAsync(Common.TodoItemDTO todoItem) {
            return base.Channel.updateAsync(todoItem);
        }
        
        public bool delete(long id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(long id) {
            return base.Channel.deleteAsync(id);
        }
    }
}
